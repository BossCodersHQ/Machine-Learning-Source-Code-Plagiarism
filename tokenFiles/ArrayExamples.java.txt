CompilationUnit 
ClassDeclaration name= ArrayExamples 
MethodDeclaration name= main 
FormalParameter name= args 
ReferenceType name= String 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= list 
ArrayInitializer 
Literal value= 1 
Literal value= 2 
Literal value= 3 
Literal value= 4 
Literal value= 1 
Literal value= 2 
Literal value= 3 
StatementExpression 
MethodInvocation 
MemberReference 
Literal value= 5 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
Assignment value= ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=11)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)) 
MemberReference 
ArrayCreator 
BasicType name= int 
ArrayInitializer 
Literal value= 1 
Literal value= 2 
Literal value= 3 
Literal value= 4 
Literal value= 5 
Literal value= 6 
Literal value= 7 
Literal value= 8 
Literal value= 9 
Literal value= 10 
Literal value= 11 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
Assignment value= ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=11), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=8), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=6), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=3), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=2)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)) 
MemberReference 
ArrayCreator 
BasicType name= int 
ArrayInitializer 
Literal value= 11 
Literal value= 10 
Literal value= 9 
Literal value= 8 
Literal value= 7 
Literal value= 6 
Literal value= 5 
Literal value= 4 
Literal value= 3 
Literal value= 2 
Literal value= 1 
Literal value= 0 
Literal value= 1 
Literal value= 2 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
Assignment value= ArrayCreator(dimensions=[None], initializer=ArrayInitializer(initializers=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1)]), postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)) 
MemberReference 
ArrayCreator 
BasicType name= int 
ArrayInitializer 
Literal value= 1 
StatementExpression 
MethodInvocation 
MemberReference 
StatementExpression 
MethodInvocation 
MemberReference 
MethodDeclaration name= findMin 
BasicType name= int 
FormalParameter name= list 
BasicType name= int 
AssertStatement value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="failed precondition") 
BinaryOperation 
BinaryOperation 
MemberReference 
Literal value= null 
BinaryOperation 
MemberReference 
Literal value= 0 
Literal value= "failed precondition" 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= indexOfMin 
Literal value= 0 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= i 
Literal value= 1 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
BlockStatement 
IfStatement 
BinaryOperation 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
ArraySelector 
MemberReference 
BlockStatement 
StatementExpression 
Assignment value= MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]) 
MemberReference 
MemberReference 
ReturnStatement 
MemberReference 
MethodDeclaration name= badResize 
FormalParameter name= list 
BasicType name= int 
FormalParameter name= newSize 
BasicType name= int 
AssertStatement value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="failed precondition") 
BinaryOperation 
BinaryOperation 
MemberReference 
Literal value= null 
BinaryOperation 
MemberReference 
Literal value= 0 
Literal value= "failed precondition" 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= temp 
ArrayCreator 
BasicType name= int 
MemberReference 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= limit 
MethodInvocation 
MemberReference 
MemberReference 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= i 
Literal value= 0 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
BlockStatement 
StatementExpression 
Assignment value= MemberReference(member=list, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]) 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
ArraySelector 
MemberReference 
StatementExpression 
Assignment value= MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]) 
MemberReference 
MemberReference 
MethodDeclaration name= goodResize 
BasicType name= int 
FormalParameter name= list 
BasicType name= int 
FormalParameter name= newSize 
BasicType name= int 
AssertStatement value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="failed precondition") 
BinaryOperation 
BinaryOperation 
MemberReference 
Literal value= null 
BinaryOperation 
MemberReference 
Literal value= 0 
Literal value= "failed precondition" 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= result 
ArrayCreator 
BasicType name= int 
MemberReference 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= limit 
MethodInvocation 
MemberReference 
MemberReference 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= i 
Literal value= 0 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
BlockStatement 
StatementExpression 
Assignment value= MemberReference(member=list, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]) 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
ArraySelector 
MemberReference 
ReturnStatement 
MemberReference 
MethodDeclaration name= findAndPrintPairs 
FormalParameter name= list 
BasicType name= int 
FormalParameter name= target 
BasicType name= int 
AssertStatement value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="failed precondition") 
BinaryOperation 
MemberReference 
Literal value= null 
Literal value= "failed precondition" 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= i 
Literal value= 0 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
BlockStatement 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= j 
BinaryOperation 
MemberReference 
Literal value= 1 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
BlockStatement 
IfStatement 
BinaryOperation 
BinaryOperation 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
BlockStatement 
StatementExpression 
MethodInvocation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
BinaryOperation 
Literal value= "The two elements at indices " 
MemberReference 
Literal value= " and " 
MemberReference 
Literal value= " are " 
MemberReference 
ArraySelector 
MemberReference 
Literal value= " and " 
MemberReference 
ArraySelector 
MemberReference 
Literal value= " add up to " 
MemberReference 
MethodDeclaration name= bubblesort 
FormalParameter name= list 
BasicType name= int 
AssertStatement value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="failed precondition") 
BinaryOperation 
MemberReference 
Literal value= null 
Literal value= "failed precondition" 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= temp 
LocalVariableDeclaration 
BasicType name= boolean 
VariableDeclarator name= changed 
Literal value= true 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= i 
Literal value= 0 
BinaryOperation 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
MemberReference 
BlockStatement 
StatementExpression 
Assignment value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false) 
MemberReference 
Literal value= false 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= j 
Literal value= 0 
BinaryOperation 
MemberReference 
BinaryOperation 
BinaryOperation 
MemberReference 
MemberReference 
Literal value= 1 
MemberReference 
BlockStatement 
AssertStatement value= BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="loop counter j "), operandr=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="is out of bounds."), operator=+) 
BinaryOperation 
BinaryOperation 
MemberReference 
Literal value= 0 
BinaryOperation 
BinaryOperation 
MemberReference 
Literal value= 1 
MemberReference 
BinaryOperation 
BinaryOperation 
Literal value= "loop counter j " 
MemberReference 
Literal value= "is out of bounds." 
IfStatement 
BinaryOperation 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
ArraySelector 
BinaryOperation 
MemberReference 
Literal value= 1 
BlockStatement 
StatementExpression 
Assignment value= Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true) 
MemberReference 
Literal value= true 
StatementExpression 
Assignment value= MemberReference(member=list, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+))]) 
MemberReference 
MemberReference 
ArraySelector 
BinaryOperation 
MemberReference 
Literal value= 1 
StatementExpression 
Assignment value= MemberReference(member=list, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=j, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]) 
MemberReference 
ArraySelector 
BinaryOperation 
MemberReference 
Literal value= 1 
MemberReference 
ArraySelector 
MemberReference 
StatementExpression 
Assignment value= MemberReference(member=temp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]) 
MemberReference 
ArraySelector 
MemberReference 
MemberReference 
AssertStatement value= None 
MethodInvocation 
MemberReference 
MethodDeclaration name= showList 
FormalParameter name= list 
BasicType name= int 
ForStatement 
ForControl 
VariableDeclaration 
BasicType name= int 
VariableDeclarator name= i 
Literal value= 0 
BinaryOperation 
MemberReference 
MemberReference 
MemberReference 
StatementExpression 
MethodInvocation 
BinaryOperation 
MemberReference 
ArraySelector 
MemberReference 
Literal value= " " 
StatementExpression 
MethodInvocation 
MethodDeclaration name= isAscending 
BasicType name= boolean 
FormalParameter name= list 
BasicType name= int 
LocalVariableDeclaration 
BasicType name= boolean 
VariableDeclarator name= ascending 
Literal value= true 
LocalVariableDeclaration 
BasicType name= int 
VariableDeclarator name= index 
Literal value= 1 
WhileStatement 
BinaryOperation 
MemberReference 
BinaryOperation 
MemberReference 
MemberReference 
BlockStatement 
AssertStatement value= None 
BinaryOperation 
BinaryOperation 
MemberReference 
Literal value= 0 
BinaryOperation 
MemberReference 
MemberReference 
StatementExpression 
Assignment value= BinaryOperation(operandl=MemberReference(member=list, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=BinaryOperation(operandl=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-))]), operandr=MemberReference(member=list, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), operator=<=) 
MemberReference 
BinaryOperation 
MemberReference 
ArraySelector 
BinaryOperation 
MemberReference 
Literal value= 1 
MemberReference 
ArraySelector 
MemberReference 
StatementExpression 
MemberReference 
ReturnStatement 
MemberReference 
